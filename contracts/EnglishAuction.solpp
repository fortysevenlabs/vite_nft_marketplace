// SPDX-License-Identifier: GPL-3.0
pragma soliditypp >=0.8.0;

import "./openzeppelin/token/ERC721/IERC721.sol";

contract EnglishAuction {
    event Start();
    event Bid(address indexed sender, uint amount);
    event Withdraw(address indexed bidder, uint amount);
    event End(address winner, uint amount);

    IERC721 public nft;
    uint public nftId;

    address public contractAddr;
    address payable public seller;
    uint public endAt;
    bool public started;
    bool public ended;

    // TODO
    // uint public reservePrice;
    uint public auctionDuration; // endAt = block.timestamp + auctionDuration;

    address public highestBidder;
    uint public highestBid;
    mapping(address => uint) public bids;

    constructor(
        address _nft,
        uint _nftId,
        uint _startingBid,
        uint _auctionDuration
    ) {
        nft = IERC721(_nft);
        nftId = _nftId;

        seller = payable(msg.sender);
        highestBid = _startingBid;
        auctionDuration = _auctionDuration;
        contractAddr = address(this);
    }

    function start() external {
        require(!started, "started");
        require(msg.sender == seller, "not seller");

        nft.transferFrom(msg.sender, contractAddr, nftId);
        started = true;
        endAt = block.timestamp + (auctionDuration * 1 seconds);
        
        emit Start();
    }

    function bid() external payable {
        require(started, "not started");
        require(block.timestamp < endAt, "ended");
        require(msg.value > highestBid, "value < highest");

        if (highestBidder != address(0)) {
            bids[highestBidder] += highestBid;
        }

        highestBidder = msg.sender;
        highestBid = msg.value;

        emit Bid(msg.sender, msg.value);
    }

    function withdraw() external {
        uint bal = bids[msg.sender];
        bids[msg.sender] = 0;
        // update transfer to specify the token being transferred
        payable(msg.sender).transfer("tti_5649544520544f4b454e6e40", bal);
        emit Withdraw(msg.sender, bal);
    }

    function end() external {
        require(started, "not started");
        require(block.timestamp >= endAt, "not ended");
        require(!ended, "ended");

        ended = true;
        if (highestBidder != address(0)) {
            nft.safeTransferFrom(address(this), highestBidder, nftId);
            // update transfer to specify the token being transferred
            seller.transfer("tti_5649544520544f4b454e6e40", highestBid);
        } else {
            nft.safeTransferFrom(address(this), seller, nftId);
        }

        emit End(highestBidder, highestBid);
    }}


    // FIXME: soliditypp + vuilder issues
    // 1 tests - multiple user accounts are not working, results in abort [Object object] error
    // 2 tests - revert error is not verbose, unclear what caused the revert
    // 3 tests - clean environment for tests, calls in one it interfere with calls in another it
    // 4 tests - some expect(await contract.call()) results in "TypeError: >accountBlockObject> is not thenable"
    // --------- are call functions promises? typeof x.then === 'function' results in false
    // --------- not using await for the contract.call() also results in error
    // 5 tests - query also doesn't return promises